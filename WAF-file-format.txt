Internet Exploder .WAF web archive format

All integers are Big Endian

Header:
	1. ".WAF"
	2. 32bit integer indicating the total length of the header (everything included)
	3. A load of crap

After the header, a series of chunks, each of which consists of:
* 'ntry' header:
	1. "ntry"
	2. 32bit integer indicating the length of rest of the ‘ntry’ header
	3. 0x20 bytes of unknown crap
	4. 32bit integer which from my poking seems to be (the length of the actual data block below) + (ntry length) + (fields length) + 0x80. I give no guarantees about this!
	5. 32bit integer indicating the total length of the following fields section

* Fields section: a sequence of fields, each of which:
	1. 4-byte field name
		In the particular file I'm picking apart:
		- 'url ' -> the actual URL of the entry, may end in a slash for implicit ‘index.html’ files.
		- 'bsrl' (seems to be base url or something, not present if the url already ends in a slash).
		- 'mime'
		- 'hntt' (some kind of UUID)
		- 'hvrs' (I guess some kind of version, is 0x03 in this file)
	2. 32bit integer indicating the length of the field data
		If the data is a string, it always seems to be 0x00 terminated and of course this is included in the length.

* Data
	1. "data"
	2. 4 0x00 bytes (seems like laziness from who implemented this, but perhaps this will be nonzero for really large files?)
	3. Actual data

* "post"
	1. "post"
	2. 32bit integer indicating the length (always 4)
	3. Some binary crap

* "XXXXXX": 0x80 ‘X’ characters. I guess somewhere in Microsoft-land, there is a good reason for this.

* "cate" (category?)
	1. "cate"
	2. 32 bit integer indicating length (always 0x20)
	3. A pile of binary crap

Then the next chunk starts.

At the very end there is a different chunk starting with a 0x200-byte "cat " field filled with binary crap, then an "aux " field of 0x30 bytes containing what appears to be the original URL from which the archive was created.


TODO: add option to automatically rewrite IMG src paths if they start with http:// and correspond to images we have in the archive, so they become local relative paths that work. Also fix paths starting with '/'. Should also do this with links.
A workflow to do this: keep track of all URLs encountered and the local file path they were written to. When done, reiterate over all HTML files and find all URLs inside them that map to a written file, then transform them to local relative paths.

Also ideally a symlink to the main file (see last URL path thing below) should be placed in the root folder.


I thought this thing did the same as I was trying: https://github.com/robrohan/WebArchiveExtractor
But it only works for Safari .webarchive files, and it fails on the only such file I seem to have.
So it still makes a lot of sense to keep on making a replacement for WebArchivConverter.

Appendix:
Experiment: try to figure out the data length:
length number -> ntry length, fields length, actual data length:
0x1800b -> 0x28 + 0x6f + 0x17f1c = 0x17fb3 (0x58 less)
0x3184 -> 0x28 + 0xab + 0x3059 = 0x3104 (0x58 less)
0x4d39 -> 0x28 + 0xad + 0x4c0c = 0x4ce1 (0x58 less)
0xae10 -> 0x28 + 0xb0 + 0xace0 = 0xadb8 (0x58 less)
0x5285 -> 0x28 + 0xb0 + 0x5155 = 0x522d (0x58 less)

In another file:
0x2b32 -> 0x28 + 0x6c + 0x2a46 = 0x2ada (0x58 less)
